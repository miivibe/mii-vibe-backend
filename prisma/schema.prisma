// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  email                 String   @unique @db.VarChar(255)
  username              String?  @unique @db.VarChar(100)
  passwordHash          String   @db.VarChar(255)
  salt                  String   @db.VarChar(255)
  firstName             String?  @db.VarChar(100)
  lastName              String?  @db.VarChar(100)
  phone                 String?  @db.VarChar(20)

  // Account status
  isActive              Boolean  @default(true)
  isVerified            Boolean  @default(false)
  isLocked              Boolean  @default(false)
  lockedUntil           DateTime?

  // Security settings
  twoFactorEnabled      Boolean  @default(false)
  twoFactorSecret       String?  @db.VarChar(255)
  twoFactorBackupCodes  Json?

  // Password policy
  passwordChangedAt     DateTime @default(now())
  passwordExpiresAt     DateTime?
  failedLoginAttempts   Int      @default(0)
  lastFailedLogin       DateTime?

  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLoginAt           DateTime?

  // Relations
  sessions              UserSession[]
  loginAttempts         LoginAttempt[]
  securityEvents        SecurityEvent[]
  otpCodes              OtpCode[]
  trustedDevices        TrustedDevice[]
  passwordHistory       PasswordHistory[]

  createdSchedules      Schedule[]
  voteParticipants      VoteParticipant[]
  minigameParticipants  MinigameParticipant[]
  eventParticipants     EventParticipant[]
  musicRequests         MusicRequest[]

  @@map("users")
}

model UserSession {
  id                    String   @id @db.VarChar(128)
  userId                Int
  accessTokenHash       String?  @db.VarChar(255)
  refreshTokenHash      String?  @db.VarChar(255)
  expiresAt             DateTime
  refreshExpiresAt      DateTime?
  deviceFingerprint     String?  @db.VarChar(255)
  ipAddress             String?  @db.VarChar(45)
  userAgent             String?  @db.Text
  countryCode           String?  @db.VarChar(2)
  city                  String?  @db.VarChar(100)
  isRememberMe          Boolean  @default(false)
  isSuspicious          Boolean  @default(false)
  requires2fa           Boolean  @default(false)
  createdAt             DateTime @default(now())
  lastActivity          DateTime @default(now())

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([deviceFingerprint])
  @@index([ipAddress])
  @@map("user_sessions")
}

model LoginAttempt {
  id                    Int      @id @default(autoincrement())
  userId                Int?
  email                 String   @db.VarChar(255)
  isSuccessful          Boolean
  failureReason         FailureReason?
  ipAddress             String   @db.VarChar(45)
  userAgent             String?  @db.Text
  deviceFingerprint     String?  @db.VarChar(255)
  countryCode           String?  @db.VarChar(2)
  city                  String?  @db.VarChar(100)
  isSuspicious          Boolean  @default(false)
  captchaRequired       Boolean  @default(false)
  captchaSolved         Boolean  @default(false)
  attemptedAt           DateTime @default(now())

  user                  User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([attemptedAt])
  @@index([isSuccessful])
  @@map("login_attempts")
}

model OtpCode {
  id                    Int      @id @default(autoincrement())
  userId                Int
  code                  String   @db.VarChar(10)
  codeHash              String   @db.VarChar(255)
  type                  OtpType
  expiresAt             DateTime
  isUsed                Boolean  @default(false)
  usedAt                DateTime?
  attempts              Int      @default(0)
  maxAttempts           Int      @default(3)
  ipAddress             String?  @db.VarChar(45)
  deviceFingerprint     String?  @db.VarChar(255)
  createdAt             DateTime @default(now())

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([codeHash])
  @@index([expiresAt])
  @@index([type])
  @@map("otp_codes")
}

model TrustedDevice {
  id                    Int      @id @default(autoincrement())
  userId                Int
  deviceFingerprint     String   @db.VarChar(255)
  deviceName            String?  @db.VarChar(255)
  deviceType            DeviceType @default(UNKNOWN)
  isTrusted             Boolean  @default(false)
  trustExpiresAt        DateTime?
  userAgent             String?  @db.Text
  lastIp                String?  @db.VarChar(45)
  lastCountry           String?  @db.VarChar(2)
  lastCity              String?  @db.VarChar(100)
  firstSeenAt           DateTime @default(now())
  lastSeenAt            DateTime @default(now())
  trustedAt             DateTime?

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceFingerprint])
  @@index([deviceFingerprint])
  @@index([isTrusted])
  @@map("trusted_devices")
}

model SecurityEvent {
  id                    Int      @id @default(autoincrement())
  userId                Int?
  eventType             EventType
  severity              Severity @default(LOW)
  description           String?  @db.Text
  ipAddress             String?  @db.VarChar(45)
  userAgent             String?  @db.Text
  deviceFingerprint     String?  @db.VarChar(255)
  countryCode           String?  @db.VarChar(2)
  city                  String?  @db.VarChar(100)
  metadata              Json?
  createdAt             DateTime @default(now())

  user                  User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([createdAt])
  @@map("security_events")
}

model PasswordHistory {
  id                    Int      @id @default(autoincrement())
  userId                Int
  passwordHash          String   @db.VarChar(255)
  salt                  String   @db.VarChar(255)
  createdAt             DateTime @default(now())

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("password_history")
}

model RateLimit {
  id                    Int      @id @default(autoincrement())
  identifier            String   @db.VarChar(255)
  identifierType        IdentifierType
  actionType            ActionType
  attempts              Int      @default(1)
  maxAttempts           Int
  windowStart           DateTime @default(now())
  windowDuration        Int
  isBlocked             Boolean  @default(false)
  blockedUntil          DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([identifier, identifierType, actionType])
  @@index([identifier])
  @@index([blockedUntil])
  @@map("rate_limits")
}

// Enums
enum FailureReason {
  INVALID_CREDENTIALS
  ACCOUNT_LOCKED
  ACCOUNT_INACTIVE
  INVALID_2FA
  RATE_LIMITED
  CAPTCHA_FAILED
  SUSPICIOUS_DEVICE
}

enum OtpType {
  EMAIL_VERIFICATION
  LOGIN_2FA
  PASSWORD_RESET
  DEVICE_VERIFICATION
}

enum DeviceType {
  DESKTOP
  MOBILE
  TABLET
  UNKNOWN
}

enum EventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_CHANGED
  ACCOUNT_LOCKED
  SUSPICIOUS_LOGIN
  NEW_DEVICE
  NEW_LOCATION
  TWO_FA_ENABLED
  TWO_FA_DISABLED
  SESSION_EXPIRED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IdentifierType {
  IP
  USER
  EMAIL
}

enum ActionType {
  LOGIN
  PASSWORD_RESET
  OTP_REQUEST
}

// ===== SCHEDULE SYSTEM =====
model Schedule {
  id          Int             @id @default(autoincrement())
  title       String
  description String?         @db.Text
  type        ScheduleType
  status      ScheduleStatus  @default(PENDING)

  startTime   DateTime
  endTime     DateTime?

  // Polymorphic relationship
  targetId    Int?
  targetType  TargetType?

  // Metadata for different schedule types
  metadata    Json?

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("schedules")
}

enum ScheduleType {
  MUSIC_PLAY
  EVENT_CREATION
  VOTE_CREATION
  MINIGAME_CREATION
  ANNOUNCEMENT
  REMINDER
}

enum ScheduleStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum TargetType {
  EVENT
  VOTE
  MINIGAME
  MUSIC_PLAYLIST
}

// ===== EVENT SYSTEM =====
model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String?     @db.Text
  eventType   EventType
  status      EventStatus @default(UPCOMING)

  startDate   DateTime
  endDate     DateTime?
  location    String?
  maxParticipants Int?

  // Event specific data
  metadata    Json?
  imageUrl    String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants EventParticipant[]

  @@map("events")
}

enum EventType {
  BIRTHDAY
  HAPPY_FRIDAY
  TEAM_BUILDING
  MEETING
  WORKSHOP
  CELEBRATION
  ANNOUNCEMENT
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model EventParticipant {
  id        Int                    @id @default(autoincrement())
  eventId   Int
  userId    Int
  status    ParticipationStatus    @default(REGISTERED)

  registeredAt DateTime @default(now())

  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participants")
}

enum ParticipationStatus {
  REGISTERED
  ATTENDED
  ABSENT
  CANCELLED
}

// ===== VOTING SYSTEM =====
model Vote {
  id          Int        @id @default(autoincrement())
  title       String
  description String?    @db.Text
  voteType    VoteType
  status      VoteStatus @default(ACTIVE)

  startDate   DateTime   @default(now())
  endDate     DateTime

  // Voting rules
  allowMultiple Boolean  @default(false)
  isAnonymous   Boolean  @default(false)
  maxSelections Int      @default(1)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  options      VoteOption[]
  participants VoteParticipant[]

  @@map("votes")
}

enum VoteType {
  MUSIC_FAVORITE
  FOOD_CHOICE
  PERSON_FAVORITE
  EVENT_PREFERENCE
  GENERAL_POLL
}

enum VoteStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model VoteOption {
  id          Int    @id @default(autoincrement())
  voteId      Int
  optionText  String
  description String?
  imageUrl    String?
  order       Int    @default(0)

  createdAt   DateTime @default(now())

  vote        Vote @relation(fields: [voteId], references: [id], onDelete: Cascade)
  participants VoteParticipant[]

  @@map("vote_options")
}

model VoteParticipant {
  id              Int @id @default(autoincrement())
  voteId          Int
  userId          Int
  selectedOptionId Int

  votedAt         DateTime @default(now())

  vote            Vote       @relation(fields: [voteId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  selectedOption  VoteOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@unique([voteId, userId, selectedOptionId])
  @@map("vote_participants")
}

// ===== MINIGAME SYSTEM =====
model Minigame {
  id          Int           @id @default(autoincrement())
  title       String
  description String?       @db.Text
  gameType    MinigameType
  status      MinigameStatus @default(ACTIVE)

  startDate   DateTime      @default(now())
  endDate     DateTime?

  // Game settings
  timeLimit   Int?          // seconds
  maxAttempts Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions    MinigameQuestion[]
  participants MinigameParticipant[]

  @@map("minigames")
}

enum MinigameType {
  QUIZ
  GUESS_PERSON
  GUESS_IMAGE
  TRIVIA
  PUZZLE
}

enum MinigameStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

model MinigameQuestion {
  id           Int          @id @default(autoincrement())
  minigameId   Int
  questionText String       @db.Text
  questionType QuestionType
  imageUrl     String?
  order        Int          @default(0)
  points       Int          @default(1)

  createdAt    DateTime @default(now())

  minigame     Minigame @relation(fields: [minigameId], references: [id], onDelete: Cascade)
  answerOptions MinigameAnswerOption[]

  @@map("minigame_questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  GUESS_PERSON
  GUESS_IMAGE
  TEXT_INPUT
}

model MinigameAnswerOption {
  id         Int     @id @default(autoincrement())
  questionId Int
  optionText String
  isCorrect  Boolean @default(false)
  order      Int     @default(0)

  createdAt  DateTime @default(now())

  question   MinigameQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("minigame_answer_options")
}

model MinigameParticipant {
  id         Int @id @default(autoincrement())
  minigameId Int
  userId     Int
  score      Int @default(0)
  attempts   Int @default(0)
  completed  Boolean @default(false)

  startedAt  DateTime @default(now())
  completedAt DateTime?

  minigame   Minigame @relation(fields: [minigameId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([minigameId, userId])
  @@map("minigame_participants")
}

// ===== MUSIC SYSTEM =====
model MusicPlaylist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  songs       MusicSong[]
  requests    MusicRequest[]

  @@map("music_playlists")
}

model MusicSong {
  id         Int    @id @default(autoincrement())
  title      String
  artist     String
  duration   Int    // seconds
  fileUrl    String
  playlistId Int
  order      Int    @default(0)

  createdAt  DateTime @default(now())

  playlist   MusicPlaylist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  requests   MusicRequest[]

  @@map("music_songs")
}

model MusicRequest {
  id         Int           @id @default(autoincrement())
  userId     Int
  songId     Int?
  playlistId Int?
  requestType MusicRequestType
  message    String?
  status     RequestStatus @default(PENDING)

  scheduledAt DateTime?
  playedAt   DateTime?
  createdAt  DateTime @default(now())

  user       User          @relation(fields: [userId], references: [id])
  song       MusicSong?    @relation(fields: [songId], references: [id])
  playlist   MusicPlaylist? @relation(fields: [playlistId], references: [id])

  @@map("music_requests")
}

enum MusicRequestType {
  SONG_REQUEST
  PLAYLIST_REQUEST
  CUSTOM_UPLOAD
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  PLAYED
}

// ===== NOTIFICATION SYSTEM =====
model Notification {
  id         Int              @id @default(autoincrement())
  title      String
  message    String           @db.Text
  type       NotificationType
  targetId   Int?
  targetType String?

  isRead     Boolean @default(false)
  userId     Int?    // null = broadcast to all

  createdAt  DateTime @default(now())
  readAt     DateTime?

  @@map("notifications")
}

enum NotificationType {
  EVENT_REMINDER
  VOTE_REMINDER
  MINIGAME_START
  MUSIC_PLAYING
  GENERAL_ANNOUNCEMENT
}